@page "/fetchdata"
@inherits RefreshablePageBase

@using MAUI_PulldownRefresh.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        await GetForecastAsync();

        // Set the method to call when a refresh is requested
        if (refreshPage != null) { refreshPage.RefreshPageRequested += RefreshForecast; }
    }

    private async Task GetForecastAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    // This method is called when a page is requested.
    // It can do anything you need.
    // Here we just refresh the 'Weather' data
    private async void RefreshForecast()
    {
        await GetForecastAsync();

        // Required to update the page.
        StateHasChanged();
    }
}
